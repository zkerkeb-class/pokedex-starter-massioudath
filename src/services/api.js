import axios from "axios";



/**
 * Service d'API pour g√©rer les op√©rations sur les Pok√©mon.
 *
 * - R√©cup√©rer tous les Pok√©mon
 * - R√©cup√©rer un Pok√©mon par ID
 * - Cr√©er un nouveau Pok√©mon
 * - Mettre √† jour un Pok√©mon existant
 * - Supprimer un Pok√©mon
 *
 * Toutes les requ√™tes sont authentifi√©es par un token JWT stock√© dans localStorage.
 *
 * @module services/api
 */


const API_URL = "http://localhost:3000/api/pokemons";

const api = axios.create({
  baseURL: API_URL,
  headers: {
    "Content-Type": "application/json",
  },
});


// R√©cup√©rer tous les Pok√©mon

/**
 * R√©cup√®re tous les Pok√©mon avec pagination.
 *
 * @param {number} [page=1] - Num√©ro de la page √† r√©cup√©rer.
 * @param {number} [limit=10] - Nombre de Pok√©mon par page.
 * @returns {Promise<Object>} - R√©sultat contenant les Pok√©mon et la pagination.
 */

export const getAllPokemons = async (page = 1, limit = 10) => {
  const token = localStorage.getItem('token'); // r√©cup√®re ton token stock√© apr√®s login/register
  const response = await api.get(`?page=${page}&limit=${limit}`, {
    headers: {
      Authorization: `Bearer ${token}`, // injecte le token ici
    },
  });
  return response.data;
};


// R√©cup√©rer un Pok√©mon sp√©cifique par ID

/**
 * R√©cup√®re un Pok√©mon sp√©cifique par son identifiant.
 *
 * @param {string} id - L'identifiant du Pok√©mon √† r√©cup√©rer.
 * @returns {Promise<Object>} - Donn√©es du Pok√©mon r√©cup√©r√©.
 */

export const getPokemonById = async (id) => {
  try {
    const response = await api.get(`/${id}`);
    return response.data.pokemon; // ‚úÖ ici on extrait directement le Pok√©mon
  } catch (error) {
    console.error(`Erreur lors de la r√©cup√©ration du Pok√©mon avec l'ID ${id}`, error);
    throw error;
  }
};
 
// Cr√©er un nouveau Pok√©mon

/**
 * Cr√©e un nouveau Pok√©mon dans la base de donn√©es.
 *
 * @param {Object} data - Donn√©es du Pok√©mon √† cr√©er.
 * @returns {Promise<Object>} - Donn√©es du Pok√©mon cr√©√©.
 */


export const createPokemon = async (data) => {
  try {
    const token = localStorage.getItem('token'); // üî• r√©cup√®re le token
    const response = await api.post("/", data, {
      headers: {
        Authorization: `Bearer ${token}`, // üî• injecte le token ici aussi
      },
    });
    return response.data;
  } catch (error) {
    console.error("Erreur lors de la cr√©ation du Pok√©mon", error);
    throw error;
  }
};


// Mettre √† jour un Pok√©mon existant
/**
 * Met √† jour un Pok√©mon existant.
 *
 * @param {string} id - L'identifiant du Pok√©mon √† mettre √† jour.
 * @param {Object} data - Nouvelles donn√©es du Pok√©mon.
 * @returns {Promise<Object>} - Donn√©es mises √† jour du Pok√©mon.
 */

export const updatePokemon = async (id, data) => {
  try {
    const token = localStorage.getItem('token'); // üî• r√©cup√®re le token
    const response = await api.put(`/${id}`, data, {
      headers: {
        Authorization: `Bearer ${token}`, // üî• injecte le token dans la requ√™te PUT
      },
    });
    return response.data;
  } catch (error) {
    console.error(`Erreur lors de la mise √† jour du Pok√©mon avec l'ID ${id}`, error);
    if (error.response && error.response.data) {
      console.log("Message d'erreur du serveur:", error.response.data);
    }
    throw error;
  }
};


// Supprimer un Pok√©mon

/**
 * Supprime un Pok√©mon de la base de donn√©es.
 *
 * @param {string} id - L'identifiant du Pok√©mon √† supprimer.
 * @returns {Promise<Object>} - R√©sultat de la suppression (succ√®s).
 */

export const deletePokemon = async (id) => {
  try {
    const token = localStorage.getItem('token');
    await api.delete(`/${id}`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return { success: true };
  } catch (error) {
    console.error(`Erreur lors de la suppression du Pok√©mon avec l'ID ${id}`, error);
    throw error;
  }
};



